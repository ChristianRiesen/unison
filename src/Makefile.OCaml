# Unison file synchronizer: src/Makefile.OCaml
# See ../LICENSE for terms.

####################################################################
#         Makefile rules for compiling ocaml programs              #
####################################################################

####################################################################
### Try to automatically guess OS

# Cygwin is for doing POSIX builds in Windows.
# MinGW is for doing native Windows builds in a minimal POSIX environment.
# MSVC is for native Windows builds without POSIX env (yet this Makefile
# requires a minimal POSIX environment anyway).
OCAML_OSTYPE:=$(shell ocamlc -config-var os_type)

ifeq (${OSCOMP},cross) # Cross-compilation under Linux
  OSARCH=win32gnuc
  EXEC_PREFIX=i686-w64-mingw32-
else ifeq (${OCAML_OSTYPE},Win32)   # Native Windows build
  OSARCH=win32
else ifeq (${OCAML_OSTYPE},Cygwin)  # POSIX build for Windows
  OSARCH=Cygwin
else
  OSARCH:=$(shell uname)

  ifeq ($(OSARCH),SunOS)
    OSARCH=solaris
  else ifeq ($(OSARCH),Darwin)
    OSARCH=osx
  endif
endif

OCAMLLIBDIR:=$(shell ocamlc -config-var standard_library)

# User interface style:
#   Legal values are
#     UISTYLE=text
#     UISTYLE=gtk3
#     UISTYLE=mac
#
# This should be set to an appropriate value automatically, depending
# on whether the lablgtk library is available
#
# For Windows, an additional UI style modifier is available, `UI_WINOS`
#   Legal values are
#     UI_WINOS=         # *default*; builds unison purely as a Windows console ('text') or GUI ('gtk3') application
#     UI_WINOS=hybrid   # (with UISTYLE=gtk3) builds unison as a hybrid application (GUI application attached to a text console)
# * ref: <https://github.com/bcpierce00/unison/issues/778>
#
LABLGTK3LIB=$(OCAMLLIBDIR)/lablgtk3
ifeq ($(OSARCH),osx)
  UISTYLE=mac
else
  ifeq ($(wildcard $(LABLGTK3LIB)),$(LABLGTK3LIB))
    UISTYLE=gtk3
  else
    LABLGTK3LIB=$(abspath $(OCAMLLIBDIR)/../lablgtk3)
    ifeq ($(wildcard $(LABLGTK3LIB)),$(LABLGTK3LIB))
      UISTYLE=gtk3
    else
      UISTYLE=text
    endif
  endif
endif
ifeq ($(UISTYLE), gtk2)
buildexecutable::
	@echo
	@echo "gtk2 GUI is no longer available.    Use  UISTYLE=gtk3  or don't specify any UISTYLE."
	@echo
	@exit 1
endif

buildexecutable::
	@echo UISTYLE = $(UISTYLE)
	@echo UI_WINOS = $(UI_WINOS)

####################################################################
### Default parameters

# Generate backtrace information for exceptions
CAMLFLAGS+=-g

ifneq ($(strip $(CFLAGS)),)
  CAMLCFLAGS+=-ccopt '$(CFLAGS)'
endif
ifneq ($(strip $(CPPFLAGS)),)
  CAMLCFLAGS+=-ccopt '$(CPPFLAGS)'
endif
ifneq ($(strip $(LDFLAGS)),)
  CAMLLDFLAGS+=-cclib '$(LDFLAGS)'
endif
ifneq ($(strip $(LDLIBS)),)
  CLIBS+=-cclib '$(LDLIBS)'
endif

INCLFLAGS=-I lwt -I ubase -I system
DEP_INCLFLAGS=-I lwt -I ubase -I system
CAMLFLAGS+=$(INCLFLAGS)
CAMLFLAGS+=-I system/$(SYSTEM) -I lwt/$(SYSTEM)

# The messy situation requiring the use of OUTPUT_SEL was fixed in OCaml 4.13.
# All usages of OUTPUT_SEL should be removed when 4.13 becomes a requirement.
ifeq ($(OSARCH),win32)
  # Native Win32 build
  EXEC_EXT=.exe
  ifeq ($(shell ocamlc -config-var ext_obj),.obj)
    OBJ_EXT=.obj
  else
    OBJ_EXT=.o
  endif
  ifeq ($(shell ocamlc -config-var ccomp_type),msvc)
    OUTPUT_SEL=-Fo
    CLIBS+=-cclib shell32.lib -cclib user32.lib -cclib "-link win32rc/unison.res"
    buildexecutable:: win32rc/unison.res
  else
    OUTPUT_SEL=-o
    CLIBS+=-cclib "-link win32rc/unison.res.lib"
    buildexecutable:: win32rc/unison.res.lib
  endif
  CWD=.
  COBJS+=system/system_win_stubs$(OBJ_EXT) lwt/lwt_unix_stubs$(OBJ_EXT)
  WINOBJS=system/system_win.cmo
  SYSTEM=win
  buildexecutable::
	@echo Building for Windows
else
  # Unix build, or Cygwin POSIX (GNU C) build
  OBJ_EXT=.o
  OUTPUT_SEL="-o "
  WINOBJS=
  SYSTEM=generic
  # This is not strictly necessary as Cygwin can do a generic Unix build
  # (and is actually meant to).
  ifeq ($(OSARCH),Cygwin)
    CWD=.
    EXEC_EXT=.exe
    CLIBS+=-cclib win32rc/unison.res.lib
    STATIC=false                      # Cygwin is not MinGW :-(
    buildexecutable:: win32rc/unison.res.lib
	@echo Building for Cygwin
  else
    CWD=$(shell pwd)
    EXEC_EXT=
    # openpty is in the libutil library
    ifneq ($(OSARCH),solaris)
      ifneq ($(OSARCH),osx)
        CLIBS+=-cclib -lutil
      endif
    endif
    ifeq ($(OSARCH),solaris)
      # ACL functions
      CLIBS+=-cclib -lsec
    endif
    buildexecutable::
	@echo Building for Unix
  endif
endif

.PHONY: buildexecutable
buildexecutable::
	@echo NATIVE = $(NATIVE)
	@echo STATIC = $(STATIC)
	@echo OSARCH = $(OSARCH)

ubase/projectInfo.ml: Makefile.ProjectInfo
	echo 'let myName = "'$(NAME)'";;' > $@
	echo 'let myVersion = "'$(VERSION)'";;' >> $@
	echo 'let myMajorVersion = "'$(MAJORVERSION)'";;' >> $@

clean::
	$(RM) ubase/projectInfo.ml

####################################################################
### Unison objects and libraries

ifeq ($(UISTYLE),mac)
  buildexecutable:: macexecutable
  UIMACDIR=uimac
else
  buildexecutable:: $(NAME)$(EXEC_EXT)
endif

ifeq ($(OSARCH),osx)
ifeq ($(strip $(XCODEFLAGS)),)
  XCODEFLAGS=-arch $(shell uname -m)  ## Prevent Xcode from trying to build universal binaries by default
endif
endif

.PHONY: macexecutable
macexecutable:
	(cd $(UIMACDIR); $(RM) -f ExternalSettings.xcconfig ; echo MARKETING_VERSION = $(VERSION) > ExternalSettings.xcconfig ; echo OCAMLLIBDIR = $(OCAMLLIBDIR) >> ExternalSettings.xcconfig)
	(cd $(UIMACDIR); xcodebuild $(XCODEFLAGS) SYMROOT=build)
	$(CC) $(CFLAGS) $(UIMACDIR)/cltool.c -o $(UIMACDIR)/build/Default/Unison.app/Contents/MacOS/cltool -framework Carbon
	codesign --remove-signature $(UIMACDIR)/build/Default/Unison.app
	codesign --force --sign - $(UIMACDIR)/build/Default/Unison.app/Contents/MacOS/cltool
	codesign --force --sign - --entitlements $(UIMACDIR)/build/uimac*.build/Default/uimac.build/Unison.app.xcent $(UIMACDIR)/build/Default/Unison.app
	codesign --verify --deep --strict $(UIMACDIR)/build/Default/Unison.app
# cltool was added into the .app after it was signed, so the signature is now
# broken. It must be removed, cltool separately signed, and then the entire
# .app (re-)signed.


# OCaml objects for the bytecode version
# File extensions will be substituted for the native code version

OCAMLOBJS += \
          ubase/umarshal.cmo \
          ubase/rx.cmo \
	  \
          unicode_tables.cmo unicode.cmo bytearray.cmo \
          system/system_generic.cmo $(WINOBJS) \
          system/$(SYSTEM)/system_impl.cmo \
          system.cmo \
          \
          ubase/projectInfo.cmo ubase/myMap.cmo ubase/safelist.cmo \
          ubase/util.cmo ubase/uarg.cmo \
          ubase/prefs.cmo ubase/trace.cmo ubase/proplist.cmo \
          \
          lwt/pqueue.cmo lwt/lwt.cmo lwt/lwt_util.cmo \
          lwt/$(SYSTEM)/lwt_unix_impl.cmo lwt/lwt_unix.cmo \
          \
          features.cmo uutil.cmo case.cmo pred.cmo terminal.cmo \
          fileutil.cmo name.cmo path.cmo fspath.cmo fs.cmo fingerprint.cmo \
          abort.cmo osx.cmo fswatch.cmo propsdata.cmo \
          props.cmo fileinfo.cmo os.cmo lock.cmo clroot.cmo common.cmo \
          tree.cmo checksum.cmo transfer.cmo xferhint.cmo \
          remote.cmo external.cmo negotiate.cmo globals.cmo fswatchold.cmo \
          fpcache.cmo update.cmo copy.cmo stasher.cmo \
	  files.cmo sortri.cmo recon.cmo transport.cmo \
          strings.cmo uicommon.cmo uitext.cmo test.cmo

OCAMLOBJS+=main.cmo

# OCaml libraries for the bytecode version
# File extensions will be substituted for the native code version
OCAMLLIBS+=unix.cma str.cma
INCLFLAGS+=-I +unix -I +str

COBJS+=osxsupport$(OBJ_EXT) pty$(OBJ_EXT) bytearray_stubs$(OBJ_EXT) hash_compat$(OBJ_EXT) props_xattr$(OBJ_EXT) props_acl$(OBJ_EXT)

########################################################################
### User Interface setup

## Text UI
ifeq ($(UISTYLE), text)
  OCAMLOBJS+=linktext.cmo
endif

## Mac UI
ifeq ($(UISTYLE),mac)
  OCAMLOBJS+=uimacbridge.cmo
  OCAMLLIBS+=threads.cma
  INCLFLAGS+=-I +threads
endif

## Graphic UI

# Patch to make a Windows GUI version come up with no
# console when click-started
ifeq ($(OSARCH), win32)
  ifneq ($(UISTYLE), text)
    ifneq ($(UI_WINOS), hybrid)
      # COBJS+=winmain.c
      CAMLLDFLAGS+=-cclib "-link -Wl,--subsystem,windows"
    endif
  endif
endif

# Gtk3 GUI
OCAMLFIND := $(shell command -v ocamlfind 2> /dev/null)

ifeq ($(UISTYLE), gtk3)
  ifndef OCAMLFIND
    CAMLFLAGS+=-I +lablgtk3 -I +cairo2
  else
    CAMLFLAGS+=$(shell $(OCAMLFIND) query -i-format lablgtk3 )
    CAMLFLAGS+=$(shell $(OCAMLFIND) query -i-format cairo2 )
  endif
  OCAMLOBJS+=pixmaps.cmo uigtk3.cmo linkgtk3.cmo
  OCAMLLIBS+=lablgtk3.cma cairo.cma
endif

########################################################################
### Filesystem monitoring

ifeq ($(OSARCH),Linux)
-include fsmonitor/linux/Makefile src/fsmonitor/linux/Makefile
INCLFLAGS+=-I fsmonitor -I fsmonitor/linux
endif

ifeq ($(OSARCH),solaris)
-include fsmonitor/solaris/Makefile src/fsmonitor/solaris/Makefile
INCLFLAGS+=-I fsmonitor -I fsmonitor/solaris
endif

ifeq ($(OSARCH),win32)
-include fsmonitor/windows/Makefile src/fsmonitor/windows/Makefile
INCLFLAGS+=-I fsmonitor -I fsmonitor/windows
endif

DEP_INCLFLAGS+=-I fsmonitor -I fsmonitor/linux -I fsmonitor/solaris -I fsmonitor/windows

####################################################################
### Static build setup

ifeq ($(STATIC), true)
  CAMLLDFLAGS+=-cclib -static
endif

####################################################################
### Dependencies

# Include an automatically generated list of dependencies
-include .depend
# Additional dependencies depending on the system
system.cmo fspath.cmo fs.cmo: system/$(SYSTEM)/system_impl.cmo
system.cmx fspath.cmx fs.cmx: system/$(SYSTEM)/system_impl.cmx
lwt/lwt_unix.cmo: lwt/$(SYSTEM)/lwt_unix_impl.cmo
lwt/lwt_unix.cmx: lwt/$(SYSTEM)/lwt_unix_impl.cmx

.PHONY: depend
depend::
	ocamlc -depend $(DEP_INCLFLAGS) *.mli *.ml */*.ml */*.mli */*/*.ml */*/*.mli > .depend

.PHONY: dependgraph
dependgraph: depend
	echo 'digraph G {' > .depend.dot.tmp
	echo '{ rank = same; "Fileinfo"; "Props"; "Fspath"; "Os"; "Path"; }'\
           >>.depend.dot.tmp
	echo '{ rank = same; "Uitext"; "Uigtk"; }'>>.depend.dot.tmp
	echo '{ rank = same; "Recon"; "Update"; "Transport"; "Files"; }'\
           >>.depend.dot.tmp
	echo '{ rank = same; "Tree"; "Safelist"; }'>>.depend.dot.tmp
	echo '{ rank = same; "Uarg"; "Prefs"; }'>>.depend.dot.tmp
	echo 'Attempting to use ocamldot and dot to produce a dependency graph:'
	-ocamldot .depend | tail -n +2 >> .depend.dot.tmp
	-dot -Tps -o DEPENDENCIES.ps .depend.dot.tmp

####################################################################
### Compilation boilerplate

ifeq ($(PROFILING), true)
  OCAMLC=$(EXEC_PREFIX)ocamlcp
else
  OCAMLC=$(EXEC_PREFIX)ocamlc
endif
OCAMLOPT=$(EXEC_PREFIX)ocamlopt

ifeq ($(NATIVE), true)
  ## Set up for native code compilation

  CAMLC=$(OCAMLOPT)
  ifeq ($(PROFILING), true)
    CAMLFLAGS+=-p
    CLIBS+=-cclib -ldl
  endif

  CAMLOBJS=$(subst .cmo,.cmx, $(subst .cma,.cmxa, $(OCAMLOBJS)))
  CAMLLIBS=$(subst .cma,.cmxa, $(OCAMLLIBS))

else
  ## Set up for bytecode compilation

  CAMLC=$(OCAMLC)
  # -output-complete-exe is available since OCaml 4.10
  ifneq ($(strip $(shell ocamlc -output-complete-exe 2>&1)),)
    CAMLLDFLAGS+=-custom
  else
    CAMLLDFLAGS+=-output-complete-exe  # can safely strip the binary
  endif

  CAMLOBJS=$(OCAMLOBJS)
  CAMLLIBS=$(OCAMLLIBS)

endif

WINDRES := $(or ${EXEC_PREFIX},$(filter i686-w64-mingw32- x86_64-w64-mingw32-,$(CC:gcc${EXEC_EXT}=)))windres
##$(info windres='${WINDRES}')

win32rc/unison.res: win32rc/unison.rc win32rc/U.ico
	rc win32rc/unison.rc

win32rc/unison.res.lib: win32rc/unison.rc win32rc/U.ico
	$(WINDRES) win32rc/unison.rc win32rc/unison.res
	$(WINDRES) win32rc/unison.res win32rc/unison.res.lib

%.ml: %.mll
	-$(RM) $@
	ocamllex $<

%.cmi : %.mli
	@echo "$(CAMLC): $< ---> $@"
	$(CAMLC) $(CAMLFLAGS) -c $(CWD)/$<

%.cmo: %.ml
	@echo "$(OCAMLC): $< ---> $@"
	$(OCAMLC) $(CAMLFLAGS) -c $(CWD)/$<

%.cmx: %.ml
	@echo "$(OCAMLOPT): $< ---> $@"
	$(OCAMLOPT) $(CAMLFLAGS) -c $(CWD)/$<

%.o %.obj: %.c
	@echo "$(CAMLC): $< ---> $@"
	$(CAMLC) $(CAMLFLAGS) $(CAMLCFLAGS) -ccopt $(OUTPUT_SEL)$(CWD)/$@ -c $(CWD)/$<

$(NAME)$(EXEC_EXT): $(CAMLOBJS) $(COBJS)
	@echo Linking $@
	$(CAMLC) -verbose $(CAMLFLAGS) $(CAMLLDFLAGS) -o $@ $(CAMLCFLAGS) $(CAMLLIBS) $^ $(CLIBS)

# Unfortunately -output-obj does not put .o files into the output, only .cmx
# files, so we have to use $(LD) to take care of COBJS.
$(NAME)-blob.o: $(CAMLOBJS) $(COBJS)
	@echo Linking $@
	$(CAMLC) -dstartup -output-obj -verbose -cclib -keep_private_externs $(CAMLFLAGS) -o u-b.o $(CAMLCFLAGS) $(CAMLLDFLAGS) $(CAMLLIBS) $(CLIBS) $(CAMLOBJS)
	$(LD) -r -keep_private_externs -o $@ u-b.o $(COBJS)
	$(RM) u-b.o

######################################################################
### Misc

clean::
	-$(RM) -r *.cmi *.cmo *.cmx *.cma *.cmxa TAGS tags
	-$(RM) -r *.o core gmon.out *~ .*~
	-$(RM) -r *.obj *.lib *.exp
	-$(RM) -r *.tmp *.bak?.tmp .*.bak?.tmp
	-$(RM) system/*.cm[iox] system/*.o system/*.obj system/win/*~
	-$(RM) system/generic/*.cm[iox] system/generic/*.o system/generic/*.obj system/generic/*~
	-$(RM) system/win/*.cm[iox] system/win/*.o system/win/*.obj system/win/*~
	-$(RM) win32rc/unison.res win32rc/unison.res.lib
	-$(RM) fsmonitor/*.cm[iox] fsmonitor/*.o fsmonitor/*.obj
	-$(RM) .depend.dot.tmp DEPENDENCIES.ps
	-$(RM) ubase/*.cm[ioxa] ubase/*.cmxa ubase/*.a ubase/*.o ubase/*~ ubase/*.bak
	-$(RM) lwt/*.cm[ioxa] lwt/*.cmxa lwt/*.a lwt/*.o lwt/*.obj lwt/*~ lwt/*.bak
	-$(RM) lwt/generic/*.cm[ioxa] lwt/generic/*.cmxa lwt/generic/*.a lwt/generic/*.o lwt/generic/*.obj lwt/generic/*~ lwt/generic/*.bak
	-$(RM) lwt/win/*.cm[ioxa] lwt/win/*.cmxa lwt/win/*.a lwt/win/*.o lwt/win/*.obj lwt/win/*~ lwt/win/*.bak

.PHONY: paths
paths:
	@echo PATH = '$(PATH)'
	@echo OCAMLLIBDIR = '$(OCAMLLIBDIR)'
